/*

    Minimum Profit - A Text Editor
    Hexadecimal viewer.

    Angel Ortega <angel@triptico.com> et al.

    This software is released into the public domain.
    NO WARRANTY. See file LICENSE for details.

*/

/** hexadecimal viewer object **/

global mp_hex_view = new(mp_base, {
        name:           '<hex view>',
        offset:         0,
        bpl:            8,
        data:           '',
        f_offset:       0,
        f_size:         0,
        fd:             NULL,

        get_status: sub (hex) {
            sprintf("%s - 0x%06x (%d)", name, offset, offset);
        },
        init:       sub (hex) {
            if ((fd = open(name, "rb")) == NULL)
                hex = NULL;

            name = sprintf(L("<hex view of %s>"), name);

            return hex;
        },
        keypress:   sub (hex, keycode) {
            if (keycode eq 'cursor-down')
                offset += bpl;
            else
            if (keycode eq 'cursor-up')
                offset -= bpl;
            else
            if (keycode eq 'page-down')
                offset += bpl * (mp.window.ty - 1);
            else
            if (keycode eq 'page-up')
                offset -= bpl * (mp.window.ty - 1);
            else
            if (keycode eq 'home')
                offset = 0;
            else
            if (keycode eq 'end')
                offset = 0x7fffffff;

            if (offset < 0)
                offset = 0;

            fseek(fd, 0, 2);
            if (offset >= ftell(fd))
                offset = ftell(fd);

            return hex;
        },
        render:     sub (hex) {
            local out = [];
            local o;

            /* calculate bytes per line */
            bpl = 100;

            while ((12 + (bpl * 4)) > mp.window.tx)
                bpl -= 1;

            /* round offset */
            offset = integer(offset / bpl) * bpl;

            fseek(fd, offset, 0);

            o = offset;

            while (size(out) < mp.window.ty) {
                local ov, nv, av, n, c;

                nv = [];
                av = [
                    mp.colors.word2.attr,
                    ' | '
                ];
                ov = [
                    mp.colors.word1.attr,
                    sprintf(" %06X |", ftell(fd))
                ];

                for (n = 0; n < bpl; n += 1) {
                    local a = 0;

                    if ((c = getchar(fd)) == NULL)
                        break;

                    if (o >= f_offset && o < f_offset + f_size)
                        a = mp.colors.search.attr;
                    else
                        a = mp.colors.normal.attr;

                    if (o == f_offset)
                        push(nv, mp.colors.normal.attr, ' ',
                            a, sprintf("%02X", ord(c)));
                    else
                        push(nv, a, sprintf(" %02X", ord(c)));

                    if (ord(c) == 0x0a)
                        c = "\x{00b6}";
                    else
                    if (ord(c) < 32 || ord(c) > 126)
                        c = "\x{00b7}";

                    push(av, a, c);

                    o += 1;
                }

                while (n < bpl) {
                    push(nv, mp.colors.normal.attr, '   ');
                    push(av, mp.colors.word2.attr,  ' ');
                    n += 1;
                }

                push(out, ov->join(nv)->join(av));

                if (c == NULL)
                    break;
            }

            while (size(out) < mp.window.ty)
                push(out, []);

            return out;
        },
        actions:    {
            seek_next:  sub (hex) {
                fseek(hex.fd, hex.f_offset + 1);

                mp.busy(1);
                local found = mp_c.search_hex(hex.fd, hex.data);
                mp.busy(0);

                if (found) {
                    hex.f_offset  = ftell(hex.fd);
                    hex.f_size    = hex.data->size() / 2;
                    hex.offset    = hex.f_offset;
                }
                else
                    mp.alert(L("Not found."));
            },

            seek:       sub (hex) {
                local t = mp.form(
                    [
                        {
                            label:   L("Hex string to seek") ~ ':',
                            type:    'text',
                            history: 'search-hex'
                        }
                    ]
                );

                if (t != NULL) {
                    hex.data = t[0];
                    hex.f_offset = hex.offset - 1;
                    hex->actions.seek_next();
                }
            }
        },
        keycodes:   {
            "ctrl-f"    => 'seek',
            "f3"        => 'seek_next'
        }
    }
);
